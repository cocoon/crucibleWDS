#!/bin/sh

#  
#    CrucibleWDS A Windows Deployment Solution
#    Copyright (C) 2011  Jon Dolny
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/.
#
# 	Some code snippets have been used from the Fog Project

. functions

isond="$1"
taskArgs="$2"
logBootArgs

if [ "$isond" = "true" ]; then
	log " ** Using On Demand Mode ** "
	for arg in "$taskArgs"; do case "$arg" in *=*) eval "$arg"; log "$arg"; esac; done
else
	checkin

	if [ "$multicast" = "false" ]; then
		
		log " ** Checking Current Queue ** " "display"
		queueResult=`curl -sSk "${web}queuestatus" --connect-timeout 10 --stderr -`
		if [ ! "$?" = "0" ]; then
			error "Could Not Determine Current Queue Availability $queueResult"
		else
			arr=$(echo $queueResult | tr "," "\n")
			i=0
			for x in $arr; do
				array[i]=$x
				i=$(( $i + 1 ))
			done

			slotsInUse=${array[0]}
			totalSlots=${array[1]}
		fi
	
		log " ...... $slotsInUse Of $totalSlots In Use" "display"
		echo
		if [ "$slotsInUse" -ge "$totalSlots" ]; then
			startPosition=`curl -sSk -Fmac="$(echo -n $mac | base64)" "${web}queuepos" --connect-timeout 10 --stderr -`
			log " ...... Queue Is Full, Waiting For An Available Slot" "display"
			sleep 2
			while true; do
				queuePosition=`curl -sSk -Fmac="$(echo -n $mac | base64)" "${web}currentpos" --connect-timeout 10 --stderr -`
				echo " ...... Current Position: $queuePosition"
				queueCount=`curl -sSk "${web}queuestatus" --connect-timeout 10 --stderr -`
				arr=$(echo $queueCount | tr "," "\n");
				i=0;
				for x in $arr; do
					array[i]=$x;
					i=$(( $i + 1 ))
				done

				slotsInUse=${array[0]}
				totalSlots=${array[1]}
				
					if [ "$slotsInUse" -ge "$totalSlots" ]; then
					log " ...... No Slots Available" "display"
				else
					aminext=`curl -sSk "${web}aminext" --connect-timeout 10 --stderr -`
					if [ "$aminext" = "$startPosition" ]; then
						inActiveSlot=`curl -sSk -FserverKey="$(echo -n "$WDS_KEY" | base64)" -Fmac="$(echo -n $mac | base64)" "${web}inslot" --connect-timeout 10 --stderr -`
						break;
					fi
				fi
				sleep 5
				
				clear
			done
		else
			inActiveSlot=`curl -sSk -FserverKey="$(echo -n "$WDS_KEY" | base64)" -Fmac="$(echo -n $mac | base64)" "${web}inslot" --connect-timeout 10 --stderr -`	
		fi
	else
		inActiveSlot=`curl -sSk -FserverKey="$(echo -n "$WDS_KEY" | base64)" -Fmac="$(echo -n $mac | base64)" "${web}inslot" --connect-timeout 10 --stderr -`
	fi
fi

sleep 2

if [ "$xferMode" = "nfs" ]; then
	mountNFS
elif [ "$xferMode" = "smb" ]; then
	mountSMB
else
	getFileNames
fi

getHD
echo
sleep 2

hdPass=0
for hd in $disks; do
	hdPass=$(( $hdPass + 1 ))
	
	drive=$(echo $hd | cut -d "/" -f 3)
	lbs=$(cat /sys/block/$drive/queue/logical_block_size)
	dsize=$(cat /sys/block/$drive/size)
	newHDSize=`expr $lbs '*' $dsize`
	minHDSizeResult=`curl -sSkL "${web}getMinHDSize?imgName=$imgName&hdToGet=$hdPass&newHDSize=$newHDSize" --connect-timeout 10 --stderr -`

	log " ** Using HD $hd ** "
	log " ...... minHDSizeResult: $minHDSizeResult" 
	arrMinSize=$(echo $minHDSizeResult | tr "," "\n")
	i=0
	for z in $arrMinSize; do
		Array[i]=$z
		i=$(( $i + 1 ))
	done

	minSizeResult=${Array[0]}
	hdToGet=${Array[1]}
	
	
	if [ "$minSizeResult" = "true" ]; then
		log " ...... HD Meets The Minimum Sized Required"
		
	elif [ "$minSizeResult" = "notexist" ]; then
		log " ...... No Image Exists To Download To This HD.  There Are More HD's Than The Original Image"
		continue
	
	elif [ "$minSizeResult" = "notactive" ]; then
		log " ...... No Active HD's To Download To This HD"
		continue
	elif [ "$minSizeResult" = "original" ]; then
		log " ...... HD Matches Original Size Of Image, Dynamic Partition Layout Will Not Be Used"
		if [ "$forceDynamicPartitions" = "true" ]; then
			log " ...... Dynamic Partitions Enforced By User"
			minSizeResult="true"
		fi
		
	elif [ "$minSizeResult" = "false" ]; then
		error "This Hard Drive Is Smaller Than Minimum Size Required For This Image"
	
	else
		error "Unknown Error Occurred While Determining Minimum HD Size Required.  Check The Exception Log"
	fi
	
	if [ "$hdToGet" = "1" ]; then
		imgPath=$imgName
	else
		clear
		imgPath=$imgName/hd$hdToGet
	fi
	
	getPartCountDeploy
	
	pushGlobal
	
	pushLVM
		
	fixNTFSGeo
	
	changeHostName

	restoreGrubLegacy
	
	if [ -n "$hostScripts" ]; then
		runScripts
	fi
	
	#Multicast for multiple hard drives is not supported yet
	if [ "$multicast" = "true" ]; then
		break
	fi

	

done
checkout
